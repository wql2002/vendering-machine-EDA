--alt_u_div DEVICE_FAMILY="Cyclone III" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=1 WIDTH_N=1 WIDTH_Q=1 WIDTH_R=1 denominator numerator quotient remainder
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_abs 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_divide 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_unc (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);

--synthesis_resources = 
SUBDESIGN alt_u_div_d2f
( 
	denominator[0..0]	:	input;
	numerator[0..0]	:	input;
	quotient[0..0]	:	output;
	remainder[0..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_unc;
	DenominatorIn[3..0]	: WIRE;
	DenominatorIn_tmp[3..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[1..0]	: WIRE;
	NumeratorIn[1..0]	: WIRE;
	NumeratorIn_tmp[1..0]	: WIRE;
	prestg[0..0]	: WIRE;
	quotient_tmp[0..0]	: WIRE;
	sel[1..0]	: WIRE;
	selnose[1..0]	: WIRE;
	StageIn[1..0]	: WIRE;
	StageIn_tmp[1..0]	: WIRE;
	StageOut[0..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[0..0];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[1..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( GND, add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[0..0], numerator[]);
	prestg[] = ( add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]));
	remainder[0..0] = StageIn[1..1];
	sel[] = ( gnd_wire, gnd_wire);
	selnose[] = ( ((! nose[1..1]) # sel[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[0..0], GND);
	StageOut[] = ( ((NumeratorIn[0..0] & selnose[0..0]) # (prestg[0..0] & (! selnose[0..0]))));
END;
--VALID FILE
